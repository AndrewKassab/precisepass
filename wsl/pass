#!/bin/bash
# Name: precisepass 
# Author: Andrew Kassab (https://github.com/AndrewKassab)
# Version: 3.01
# Date: 03/01/2019

# Usage statements
USAGEEDIT="Usage: pass -e (--edit) platform-name"    
USAGEGET="Usage: pass -g (--get)  platform-name"
USAGEREMOVE="Usage: pass -r (--remove) platform-name"
USAGEADD="Usage: pass -a (--add)"
#Directory Containing Passwords
PASSWORDS=~/.precisepass
#File Containing Passwords
FILE=passwords.txt
# File Containing all platforms, For tab auto completion
PLAT_FILE=platforms.txt

PLATFORMS=""
MODIFIER=$1
PLATFORM=$2

# function: get
# parameters: platform-name
# retrieves and copys a password to the clipboard 
function get {
    
    # change into directory containing password file
    cd $PASSWORDS

    # search for that platform within the file
    OUTPUT=`cat $FILE | grep -i "Account: \<$1\>"`

    # cut out 'Account' characters
    TEST=`echo $OUTPUT | cut -c1-7`
    
    # check if platform is valid by starting with Account:
    if [ "$TEST" != "Account" ]; then
    	echo 'Invalid Platform / Account'
    	exit 1
    fi
    
    # Make sure we are retrieving the right password
    echo $OUTPUT
    echo -n "Is this the correct account? (Y/n): "
    read RESPONSE

    # If the user responds no
    if [ ! -z "$RESPONSE" ] && ([ $RESPONSE != "y" ] && [ $RESPONSE != "Y" ]); then
      echo 'Use more specific account name. ( tab for options )'
      exit 1
    fi

    # Ignore case, add line number
    OUTPUT=`grep -inr $1 $FILE`

    # Remove and store just the line number
    LINENUMBER=`echo ${OUTPUT%%:*}` 

    # Change line number to the line with user name rather than the platform
    LINENUMBER=$((LINENUMBER+1))

    # Prints out username
    echo `cat $FILE | head -n $LINENUMBER | tail -n 1` 

    # Change line number to the line with password rather than the username
    LINENUMBER=$((LINENUMBER+1))

    # Copys password to the clipboard
    echo `cat $FILE | head -n $LINENUMBER | tail -n 1 | cut -c11-27` >> ~/tmppsfile
    echo *Password copied to clipboard*

}

# function: add
# adds a password to the password file
function add {

    if [ ! -d "$PASSWORDS" ]; then
      mkdir $PASSWORDS
    fi

    # change into directory containing passwords
    cd $PASSWORDS

    # First time user, create password file and set permissions
    if [ ! -f $FILE ]; then
        touch $FILE
        echo "User Info and Passwords:" >> $FILE
        chmod 000 $FILE 
        echo "Password file created in $PASSWORDS"
    fi

    # Platform 
    echo -n 'Enter platform name: '
    read PLAT
    while [ -z "$PLAT" ]; do
        echo 'Blank entry, try again'
        echo -n 'Enter platform name: '
        read PLAT
    done

    # search for that platform within the file
    OUTPUT=`cat $FILE | grep -i "Account: \<$PLAT\>"`

    # cut out 'Account' characters
    TEST=`echo $OUTPUT | cut -c1-7`
    
    # check if platform already exists by starting with Account
    if [ "$TEST" == "Account" ]; then
    	echo "A password already exists for $PLAT"
    	exit 1
    fi

    # User / Account name
    echo -n 'Enter user name: '
    read ACCOUNT
    while [ -z $ACCOUNT ]; do
        echo 'Blank entry, try again'
        echo -n 'Enter user name: '
        read ACCOUNT
    done

    # Password
    echo -n 'Enter password: '
    read PASS
    while [ -z $PASS ]; do
        echo 'Blank entry, try again'
        echo -n 'Enter password: '
        read PLAT
    done

    # Confirm with user
    echo ''
    echo "Account: $PLAT"
    echo "Username: $ACCOUNT"
    echo "Password: $PASS"
    echo ''
    echo -n 'Add entry? (y/N):'
    read RESPONSE

    # If the user responds yes
    if [ ! -z "$RESPONSE" ] &&  ([ $RESPONSE == "y" ] || [ $RESPONSE == "Y" ]); then
        echo '' >> $FILE
        echo "Account: $PLAT" >> $FILE
        echo "Username: $ACCOUNT" >> $FILE
        echo "Password: $PASS" >> $FILE
        echo 'Account and password successfully added'
    # If the user responds no
    else 
    echo 'Entry canceled'
    exit 1
    fi

    # update platforms file
    updatePlatforms 

}

# function: edit
# parameters: platform-name
# edits a password for a platform already present in the file
function edit {
    
    # change into directory containing passwords
    cd $PASSWORDS

    # find platform requested in password file
    OUTPUT=`cat $FILE | grep -i "Account: \<$1\>"`

    # make sure platform is valid ( follows Account )
    TEST=`echo $OUTPUT | cut -c1-7`
    if [ "$TEST" != "Account" ]; then
        echo 'Invalid Platform / Account'
        exit 1
    fi

    # Search for the account ignoring case
    OUTPUT=`grep -i $1 $FILE`

    # confirm with user
    echo $OUTPUT
    echo -n "Is this the correct account? (y/N): "
    read RESPONSE

    # If the user responds no
    if [ -z "$RESPONSE" ] || ([ $RESPONSE != "y" ] && [ $RESPONSE != "Y" ]); then
        echo 'Use more specific account name. ( tab for options )'
        exit 1
    fi

    # Include line number
    OUTPUT=`grep -inr $1 $FILE`

    unset RESPONSE

    # While the user responds no
    while [ -z "$RESPONSE" ] || ([ $RESPONSE != "y" ] && [ $RESPONSE != "Y" ]); do
        echo -n 'Enter new password: '
        read NEWPASS
        echo -n "Is this correct?: $NEWPASS (y/N): "
        read RESPONSE
    done

    # Linenumber set to account line
    LINENUMBER=`echo ${OUTPUT%%:*}` 

    # Line changed to line containing password
    LINENUMBER=$((LINENUMBER+2))

    # Replaces line at LINENUMBER
    sed -i "${LINENUMBER}s/.*/Password: ${NEWPASS}/" $FILE

    echo 'Password successfully changed'

}

# function: remove
# paramaters: platform-name 
# removes a password from the password file
function remove {
    
    # change into directory containing passwords
    cd $PASSWORDS

    # find the platform requested in the password file
    OUTPUT=`cat $FILE | grep -i "Account: \<$1\>"`

    # make sure the platform is valid ( follows 'Account' )
    TEST=`echo $OUTPUT | cut -c1-7`
    if [ "$TEST" != "Account" ]; then
        echo 'Invalid Platform / Account'
        exit 1
    fi

    # Search for the account ignoring case
    OUTPUT=`grep -i $1 $FILE`

    # confirm account choice
    echo $OUTPUT
    echo -n "Is this the correct account? (y/N): "
    read RESPONSE

    # If the user responds no
    if [ -z "$RESPONSE" ] || ([ $RESPONSE != "y" ] && [ $RESPONSE != "Y" ]); then
        echo 'Use more specific account name. ( tab for options )'
        exit 1
    fi

    # Include line number
    OUTPUT=`grep -inr $1 $FILE`

    unset RESPONSE
    
    # confirm action
    echo -n "Remove account and password?: (y/N): "
    read RESPONSE
    
    # If the user responds no
    if [ -z "$RESPONSE" ] || ([ $RESPONSE != "y" ] && [ $RESPONSE != "Y" ]); then
        echo 'Exiting.'
        exit 1
    fi

    # Linenumber set to account line
    STARTLINE=`echo ${OUTPUT%%:*}`
    STARTLINE=$(( $STARTLINE - 1 ))
    ENDLINE=$(( $STARTLINE + 3 ))
    
    # Removes 4 lines from STARTLINE-ENDLINE from password file
    sed -i.bak "${STARTLINE},${ENDLINE}d" $FILE
    
    # remove the backup file
    rm -f $FILE.bak

    echo 'Password successfully removed'

    # update platforms file
    updatePlatforms 

}

# function: updatePlatforms
# Updates the platforms text file for updated auto completions
function updatePlatforms {

    # Get the amount of passwords from our password file
    NUMPASSWORDS=`sudo grep Account: /etc/passwords.txt | wc -l`
    COUNTER=1

    # loop over and grab each platform to add it to autocompletion
    while [ $COUNTER -le $NUMPASSWORDS ]; do
        OUTPUT=`sudo grep Account: $PASSWORDS/$FILE | sed -n ${COUNTER}p`
        # Removes the "Account: " keyword"
        PLATFORM=${OUTPUT:9}
        # Extracts only the first word of the platform name
        PLATFORM=`echo $PLATFORM | cut -d' ' -f1`
        # convert to lowercase 
        PLATFORM=`echo $PLATFORM | tr '[:upper:]' '[:lower:]'`
        # Add to platforms 
        PLATFORMS+="$PLATFORM "
        # move to next line of grep output
        let COUNTER=COUNTER+1
    done

    # put all platforms in platform file for auto completion loading
    echo $PLATFORMS > $PASSWORDS/$PLAT_FILE
}

# No modifier passed in
if [ "$#" == 0 ]; then
    echo $USAGEGET
    echo $USAGEEDIT
    echo $USAGEREMOVE
    echo $USAGEADD
    exit 1
fi

# Prompt for root password    
if [ $EUID != 0 ]; then
    sudo "$0" "$@"
    cd ~
    # copy password to clipboard , redirect if not using get
    ( cat tmppsfile | clip.exe ) 2> /dev/null
    rm -f tmppsfile 2> /dev/null
    exit $?
fi

# Convert full commands to shorthand
if [ $MODIFIER = "--get" ]; then
    MODIFIER="-g"
elif [ $MODIFIER = "--add" ]; then
    MODIFIER="-a"
elif [ $MODIFIER = "--edit" ]; then
    MODIFIER="-e"
elif [ $MODIFIER = "--remove" ]; then
    MODIFIER="-r"
fi

# Check to see which function should be called
case "$MODIFIER" in
    -g) #get 
        # make sure usage is correct
        if [ "$#" == 1 ] || [ "$#" -gt 2 ]; then
            echo $USAGEGET
            exit 1
        fi
        # call get
        get $PLATFORM
        ;;
    -a) #add
        # make sure usage is correct
        if [ "$#" -gt 1 ]; then
            echo $USAGEADD
            exit 1
        fi
        # call add
        add
        ;;
    -e) #edit
        # make sure usage is correct
        if [ "$#" == 1 ] || [ $# -gt 2 ]; then
            echo $USAGEEDIT
            exit 1
        fi
        # call edit
        edit $PLATFORM
        ;;
    -r) #remove 
        # make sure usage is correct
        if [ "$#" == 1 ] || [ $# -gt 2 ]; then
            echo $USAGEREMOVE
            exit 1
        fi
        # call remove
        remove $PLATFORM
        ;;

    *) # default
        echo $USAGEGET
        echo $USAGEEDIT
        echo $USAGEREMOVE
        echo $USAGEADD
        exit 1
        ;;
esac

# END
